package fr.swynn;import fr.swynn.commands.*;import fr.swynn.commands.completer.HomeCompleter;import fr.swynn.commands.completer.PlayerCompleter;import fr.swynn.core.data.ConfigurationProvider;import fr.swynn.core.data.HomeRepository;import fr.swynn.core.data.HomeService;import fr.swynn.core.data.TeleportService;import fr.swynn.core.impl.MinecraftConfigurationProvider;import fr.swynn.core.impl.MinecraftHomeRepository;import fr.swynn.core.impl.MinecraftHomeService;import fr.swynn.core.impl.MinecraftTeleportService;import org.bukkit.configuration.file.FileConfiguration;import org.bukkit.plugin.java.JavaPlugin;public class HomeAndTPA extends JavaPlugin {    // The singleton instance of the plugin    private static HomeAndTPA instance;    // The home repository for managing homes persistence operations    private HomeRepository homeRepository;    // The home service for managing player homes    private HomeService homeService;    // The teleport service for managing teleport requests    private TeleportService teleportService;    // The configration provider for getting messages from the config    private ConfigurationProvider configurationProvider;    /**     * {@inheritDoc}     */    @Override    public void onEnable() {        // Initialize the singleton instance        instance = this;        // Load the configuration        final var config = loadConfiguration();        // Initialize the repository and the service        teleportService = new MinecraftTeleportService();        configurationProvider = new MinecraftConfigurationProvider(config);        homeRepository = new MinecraftHomeRepository();        final var homes = homeRepository.getAllHomes();        homeService = new MinecraftHomeService(homes);        // Initialize spigot stuff        registerCommands();    }    private FileConfiguration loadConfiguration() {        final var config = getConfig();        config.options().copyDefaults(true);        saveConfig();        return config;    }    /**     * Register all the commands.     */    private void registerCommands() {        getLogger().info("Registering commands...");        // Home commands        getCommand("sethome")                .setExecutor(new SetHomeCommand());        getCommand("home")                .setExecutor(new HomeCommand());        getCommand("home")                .setTabCompleter(new HomeCompleter());        getCommand("delhome")                .setExecutor(new DelHomeCommand());        getCommand("delhome")                .setTabCompleter(new HomeCompleter());        // Teleport commands        getCommand("tpa")                .setExecutor(new TeleportCommand());        getCommand("tpyes")                .setExecutor(new TeleportAcceptCommand());        getCommand("tpno")                .setExecutor(new TeleportDeclinedCommand());        getCommand("tpa")                .setTabCompleter(new PlayerCompleter());        // Spawn command        getCommand("spawn")                .setExecutor(new SpawnCommand());        getLogger().info("Commands registered");    }    /**     * {@inheritDoc}     */    @Override    public void onDisable() {        saveHomes();    }    /**     * Save all the homes.     */    private void saveHomes() {        getLogger().info("Saving homes...");        final var homes = homeService.getAllHomes();        homeRepository.saveAllHomes(homes);        getLogger().info("Homes saved");    }    /**     * Get the singleton instance of the plugin.     *     * @return The plugin instance     */    public static HomeAndTPA getInstance() {        return instance;    }    /**     * Get the service for managing player homes.     *     * @return The home service     */    public HomeService getHomeService() {        return homeService;    }    /**     * Get the service for managing teleport requests.     *     * @return The teleport service     */    public TeleportService getTeleportService() {        return teleportService;    }    /**     * Get the configuration provider for getting messages from the config.     *     * @return The configuration provider     */    public ConfigurationProvider getConfigurationProvider() {        return configurationProvider;    }}